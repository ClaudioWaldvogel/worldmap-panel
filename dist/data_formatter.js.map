{"version":3,"sources":["../src/data_formatter.js"],"names":["_","decodeGeoHash","DataFormatter","ctrl","kbn","data","series","length","highestValue","lowestValue","Number","MAX_VALUE","forEach","serie","lastPoint","last","datapoints","lastValue","isArray","location","find","locations","loc","key","toUpperCase","alias","isString","push","value","valueFormatted","valueRounded","dataValue","locationName","name","locationLatitude","latitude","locationLongitude","longitude","stats","panel","valueName","roundValue","parseInt","decimals","valueRange","totalProbes","failingProbes","failingProbesNames","successRate","targetEnvironments","isAp","encodedGeohash","decodedGeohash","dataList","esGeoPoint","esMetric","result","type","columnNames","columns","column","columnIndex","text","rows","row","esLocationName","createDataValue","datapoint","tableData","tableQueryOptions","queryType","geohashField","latitudeField","longitudeField","labelField","metricField","point","undefined","Math","round"],"mappings":"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","file":"data_formatter.js","sourcesContent":["import _ from 'lodash';\nimport decodeGeoHash from './geohash';\n\nexport default class DataFormatter {\n  constructor(ctrl, kbn) {\n    this.ctrl = ctrl;\n    this.kbn = kbn;\n  }\n\n  setValues(data) {\n    if (this.ctrl.series && this.ctrl.series.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      this.ctrl.series.forEach((serie) => {\n        const lastPoint = _.last(serie.datapoints);\n        const lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n        const location = _.find(this.ctrl.locations, (loc) => { return loc.key.toUpperCase() === serie.alias.toUpperCase(); });\n\n        if (!location) return;\n\n        if (_.isString(lastValue)) {\n          data.push({key: serie.alias, value: 0, valueFormatted: lastValue, valueRounded: 0});\n        } else {\n          const dataValue = {\n            key: serie.alias,\n            locationName: location.name,\n            locationLatitude: location.latitude,\n            locationLongitude: location.longitude,\n            value: serie.stats[this.ctrl.panel.valueName],\n            valueFormatted: lastValue,\n            valueRounded: 0\n          };\n\n          if (dataValue.value > highestValue) highestValue = dataValue.value;\n          if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n          dataValue.valueRounded = this.kbn.roundValue(dataValue.value, parseInt(this.ctrl.panel.decimals, 10) || 0);\n          data.push(dataValue);\n        }\n      });\n\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n\n  setApValues(data) {\n    if (this.ctrl.series && this.ctrl.series.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      this.ctrl.series.forEach((serie) => {\n        const location = _.find(this.ctrl.locations, (loc) => { return loc.key.toUpperCase() === serie.alias.toUpperCase(); });\n\n        if (!location) return;\n\n        const dataValue = {\n          key: serie.alias,\n          locationName: location.name,\n          locationLatitude: location.latitude,\n          locationLongitude: location.longitude,\n          value: serie.stats[\"totalProbes\"],\n          valueFormatted: serie.stats[\"successRate\"] + \"%\",\n          valueRounded: 0,\n          totalProbes: serie.stats[\"totalProbes\"],\n          failingProbes: serie.stats[\"failingProbes\"],\n          failingProbesNames: serie.stats[\"failingProbesNames\"],\n          successRate: serie.stats[\"successRate\"],\n          targetEnvironments: serie.stats[\"targetEnvironments\"],\n          isAp: true\n        }\n\n        if (dataValue.value > highestValue) highestValue = dataValue.value;\n        if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n        dataValue.valueRounded = this.kbn.roundValue(dataValue.value, parseInt(this.ctrl.panel.decimals, 10) || 0);\n        data.push(dataValue);\n      }\n      );\n\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n\n  createDataValue(encodedGeohash, decodedGeohash, locationName, value) {\n    const dataValue = {\n      key: encodedGeohash,\n      locationName: locationName,\n      locationLatitude: decodedGeohash.latitude,\n      locationLongitude: decodedGeohash.longitude,\n      value: value,\n      valueFormatted: value,\n      valueRounded: 0\n    };\n\n    dataValue.valueRounded = this.kbn.roundValue(dataValue.value, this.ctrl.panel.decimals || 0);\n    return dataValue;\n  }\n\n  setGeohashValues(dataList, data) {\n    if (!this.ctrl.panel.esGeoPoint || !this.ctrl.panel.esMetric) return;\n\n    if (dataList && dataList.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      dataList.forEach((result) => {\n        if (result.type === 'table') {\n          const columnNames = {};\n\n          result.columns.forEach((column, columnIndex) => {\n            columnNames[column.text] = columnIndex;\n          });\n\n          result.rows.forEach((row) => {\n            const encodedGeohash = row[columnNames[this.ctrl.panel.esGeoPoint]];\n            const decodedGeohash = decodeGeoHash(encodedGeohash);\n            const locationName = this.ctrl.panel.esLocationName ? row[columnNames[this.ctrl.panel.esLocationName]] : encodedGeohash;\n            const value = row[columnNames[this.ctrl.panel.esMetric]];\n\n            const dataValue = this.createDataValue(encodedGeohash, decodedGeohash, locationName, value, highestValue, lowestValue);\n            if (dataValue.value > highestValue) highestValue = dataValue.value;\n            if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n            data.push(dataValue);\n          });\n\n          data.highestValue = highestValue;\n          data.lowestValue = lowestValue;\n          data.valueRange = highestValue - lowestValue;\n        } else {\n          result.datapoints.forEach((datapoint) => {\n            const encodedGeohash = datapoint[this.ctrl.panel.esGeoPoint];\n            const decodedGeohash = decodeGeoHash(encodedGeohash);\n            const locationName = this.ctrl.panel.esLocationName ? datapoint[this.ctrl.panel.esLocationName] : encodedGeohash;\n            const value = datapoint[this.ctrl.panel.esMetric];\n\n            const dataValue = this.createDataValue(encodedGeohash, decodedGeohash, locationName, value, highestValue, lowestValue);\n            if (dataValue.value > highestValue) highestValue = dataValue.value;\n            if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n            data.push(dataValue);\n          });\n\n          data.highestValue = highestValue;\n          data.lowestValue = lowestValue;\n          data.valueRange = highestValue - lowestValue;\n        }\n      });\n    }\n  }\n\n  static tableHandler(tableData) {\n    const datapoints = [];\n\n    if (tableData.type === 'table') {\n      const columnNames = {};\n\n      tableData.columns.forEach((column, columnIndex) => {\n        columnNames[columnIndex] = column.text;\n      });\n\n      tableData.rows.forEach((row) => {\n        const datapoint = {};\n\n        row.forEach((value, columnIndex) => {\n          const key = columnNames[columnIndex];\n          datapoint[key] = value;\n        });\n\n        datapoints.push(datapoint);\n      });\n    }\n\n    return datapoints;\n  }\n\n  setTableValues(tableData, data) {\n    if (tableData && tableData.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      tableData[0].forEach((datapoint) => {\n        let key;\n        let longitude;\n        let latitude;\n\n        if (this.ctrl.panel.tableQueryOptions.queryType === 'geohash') {\n          const encodedGeohash = datapoint[this.ctrl.panel.tableQueryOptions.geohashField];\n          const decodedGeohash = decodeGeoHash(encodedGeohash);\n\n          latitude = decodedGeohash.latitude;\n          longitude = decodedGeohash.longitude;\n          key = encodedGeohash;\n        } else {\n          latitude = datapoint[this.ctrl.panel.tableQueryOptions.latitudeField];\n          longitude = datapoint[this.ctrl.panel.tableQueryOptions.longitudeField];\n          key = `${latitude}_${longitude}`;\n        }\n\n        const dataValue = {\n          key: key,\n          locationName: datapoint[this.ctrl.panel.tableQueryOptions.labelField] || 'n/a',\n          locationLatitude: latitude,\n          locationLongitude: longitude,\n          value: datapoint[this.ctrl.panel.tableQueryOptions.metricField],\n          valueFormatted: datapoint[this.ctrl.panel.tableQueryOptions.metricField],\n          valueRounded: 0\n        };\n\n        if (dataValue.value > highestValue) highestValue = dataValue.value;\n        if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n        dataValue.valueRounded = this.kbn.roundValue(dataValue.value, this.ctrl.panel.decimals || 0);\n        data.push(dataValue);\n      });\n\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n\n  setJsonValues(data) {\n    if (this.ctrl.series && this.ctrl.series.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      this.ctrl.series.forEach((point) => {\n        const dataValue = {\n          key: point.key,\n          locationName: point.name,\n          locationLatitude: point.latitude,\n          locationLongitude: point.longitude,\n          value: (point.value !== undefined) ? point.value : 1,\n          valueRounded: 0\n        };\n        if (dataValue.value > highestValue) highestValue = dataValue.value;\n        if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n        dataValue.valueRounded = Math.round(dataValue.value);\n        data.push(dataValue);\n      });\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n}\n"]}