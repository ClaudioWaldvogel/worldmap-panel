{"version":3,"sources":["../src/worldmap_ctrl.js"],"names":["MetricsPanelCtrl","TimeSeries","kbn","_","mapRenderer","DataFormatter","panelDefaults","maxDataPoints","mapCenter","mapCenterLatitude","mapCenterLongitude","initialZoom","valueName","circleMinSize","circleMaxSize","locationData","thresholds","colors","unitSingle","unitPlural","showLegend","mouseWheelZoom","esMetric","decimals","hideEmpty","hideZero","stickyLabels","tableQueryOptions","queryType","geohashField","latitudeField","longitudeField","metricField","mapCenters","WorldmapCtrl","$scope","$injector","contextSrv","setMapProvider","defaults","panel","dataFormatter","events","on","onInitEditMode","bind","onDataReceived","onPanelTeardown","onDataSnapshotLoad","loadLocationDataFromFile","tileServer","user","lightTheme","setMapSaturationClass","saturationClass","reload","map","snapshotLocationData","locations","jsonpUrl","jsonpCallback","window","$","ajax","type","url","contentType","dataType","success","res","render","jsonUrl","getJSON","then","reloadLocations","refresh","remove","addEditorTab","dataList","dashboard","snapshot","data","setGeohashValues","tableData","tableHandler","setTableValues","series","setJsonValues","console","log","regions","processApData","length","apSeriesHandler","setApValues","seriesHandler","setValues","updateThresholdData","centerOnLastGeoHash","last","locationLatitude","locationLongitude","setNewMapCenter","snapshotData","forEach","element","target","props","location","targetEnvironment","id","isKO","endsWith","region","find","r","name","undefined","ids","failedIds","environments","push","idExists","includes","allTarget","replace","allElement","d","error","index","datapoints","failingInstances","allInstances","total","failing","successRate","toFixed","alias","stats","totalProbes","failingProbes","failingProbesNames","targetEnvironments","seriesData","flotpairs","getFlotPairs","nullPointMode","mapCenterMoved","setZoom","removeLegend","setMouseWheelZoom","clearCircles","legend","update","split","strValue","Number","trim","size","pop","newColor","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"worldmap_ctrl.js","sourcesContent":["/* eslint import/no-extraneous-dependencies: 0 */\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\n\nimport _ from 'lodash';\nimport mapRenderer from './map_renderer';\nimport DataFormatter from './data_formatter';\nimport './css/worldmap-panel.css!';\n\nconst panelDefaults = {\n  maxDataPoints: 1,\n  mapCenter: '(0°, 0°)',\n  mapCenterLatitude: 0,\n  mapCenterLongitude: 0,\n  initialZoom: 1,\n  valueName: 'total',\n  circleMinSize: 2,\n  circleMaxSize: 30,\n  locationData: 'countries',\n  thresholds: '0,10',\n  colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n  unitSingle: '',\n  unitPlural: '',\n  showLegend: true,\n  mouseWheelZoom: false,\n  esMetric: 'Count',\n  decimals: 0,\n  hideEmpty: false,\n  hideZero: false,\n  stickyLabels: false,\n  tableQueryOptions: {\n    queryType: 'geohash',\n    geohashField: 'geohash',\n    latitudeField: 'latitude',\n    longitudeField: 'longitude',\n    metricField: 'metric'\n  }\n\n};\n\nconst mapCenters = {\n  '(0°, 0°)': {mapCenterLatitude: 0, mapCenterLongitude: 0},\n  'North America': {mapCenterLatitude: 40, mapCenterLongitude: -100},\n  'Europe': {mapCenterLatitude: 46, mapCenterLongitude: 14},\n  'West Asia': {mapCenterLatitude: 26, mapCenterLongitude: 53},\n  'SE Asia': {mapCenterLatitude: 10, mapCenterLongitude: 106},\n  'Last GeoHash': {mapCenterLatitude: 0, mapCenterLongitude: 0}\n};\n\nexport default class WorldmapCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector, contextSrv) {\n    super($scope, $injector);\n\n    this.setMapProvider(contextSrv);\n    _.defaults(this.panel, panelDefaults);\n\n    this.dataFormatter = new DataFormatter(this, kbn);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n\n    this.loadLocationDataFromFile();\n  }\n\n  setMapProvider(contextSrv) {\n    this.tileServer = contextSrv.user.lightTheme ? 'CartoDB Positron' : 'CartoDB Dark';\n    this.setMapSaturationClass();\n  }\n\n  setMapSaturationClass() {\n    if (this.tileServer === 'CartoDB Dark') {\n      this.saturationClass = 'map-darken';\n    } else {\n      this.saturationClass = '';\n    }\n  }\n\n  loadLocationDataFromFile(reload) {\n    if (this.map && !reload) return;\n\n    if (this.panel.snapshotLocationData) {\n      this.locations = this.panel.snapshotLocationData;\n      return;\n    }\n\n    if (this.panel.locationData === 'jsonp endpoint') {\n      if (!this.panel.jsonpUrl || !this.panel.jsonpCallback) return;\n\n      window.$.ajax({\n        type: 'GET',\n        url: this.panel.jsonpUrl + '?callback=?',\n        contentType: 'application/json',\n        jsonpCallback: this.panel.jsonpCallback,\n        dataType: 'jsonp',\n        success: (res) => {\n          this.locations = res;\n          this.render();\n        }\n      });\n    } else if (this.panel.locationData === 'json endpoint') {\n      if (!this.panel.jsonUrl) return;\n\n      window.$.getJSON(this.panel.jsonUrl).then((res) => {\n        this.locations = res;\n        this.render();\n      });\n    } else if (this.panel.locationData === 'table') {\n      // .. Do nothing\n    } else if (this.panel.locationData !== 'geohash' && this.panel.locationData !== 'json result') {\n      window.$.getJSON('public/plugins/grafana-worldmap-panel/data/' + this.panel.locationData + '.json')\n        .then(this.reloadLocations.bind(this));\n    }\n  }\n\n  reloadLocations(res) {\n    this.locations = res;\n    this.refresh();\n  }\n\n  showTableGeohashOptions() {\n    return this.panel.locationData === 'table' && this.panel.tableQueryOptions.queryType === 'geohash';\n  }\n\n  showTableCoordinateOptions() {\n    return this.panel.locationData === 'table' && this.panel.tableQueryOptions.queryType === 'coordinates';\n  }\n\n  onPanelTeardown() {\n    if (this.map) this.map.remove();\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Worldmap', 'public/plugins/grafana-worldmap-panel/partials/editor.html', 2);\n  }\n\n  onDataReceived(dataList) {\n    if (!dataList) return;\n\n    if (this.dashboard.snapshot && this.locations) {\n      this.panel.snapshotLocationData = this.locations;\n    }\n\n    const data = [];\n\n    if (this.panel.locationData === 'geohash') {\n      this.dataFormatter.setGeohashValues(dataList, data);\n    } else if (this.panel.locationData === 'table') {\n      const tableData = dataList.map(DataFormatter.tableHandler.bind(this));\n      this.dataFormatter.setTableValues(tableData, data);\n    } else if (this.panel.locationData === 'json result') {\n      this.series = dataList;\n      this.dataFormatter.setJsonValues(data);\n    } else {\n      console.log('Processing AP data..');\n      const regions = this.processApData(dataList);\n      if (regions.length > 0) {\n        this.series = regions.map(this.apSeriesHandler.bind(this));\n        this.dataFormatter.setApValues(data);\n      } else {\n        this.series = dataList.map(this.seriesHandler.bind(this));\n        this.dataFormatter.setValues(data);\n      }\n\n    }\n    this.data = data;\n\n    this.updateThresholdData();\n\n    if (this.data.length && this.panel.mapCenter === 'Last GeoHash') {\n      this.centerOnLastGeoHash();\n    } else {\n      this.render();\n    }\n  }\n\n  centerOnLastGeoHash() {\n    mapCenters[this.panel.mapCenter].mapCenterLatitude = _.last(this.data).locationLatitude;\n    mapCenters[this.panel.mapCenter].mapCenterLongitude = _.last(this.data).locationLongitude;\n    this.setNewMapCenter();\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.onDataReceived(snapshotData);\n  }\n\n  // process the data form the query \n  processApData(dataList) {\n    const regions = [];\n\n    dataList.forEach(element => {\n      // ensure we are not dealing with something not AP related\n      if (!element.target || !element.props[\"location.keyword\"] || !element.props[\"id.keyword\"]) {\n        return; // this is continue actually\n      }\n\n      const location = element.props[\"location.keyword\"];\n      const targetEnvironment = element.props[\"targetEnvironment.keyword\"];\n      const id = element.props[\"id.keyword\"];\n      const isKO = element.target.endsWith(\"KO\");\n\n      // find region\n      let region = regions.find(r => location == r.name);\n      if (region === undefined) {\n        region = {\n          name: location,\n          ids: [],\n          failedIds: [],\n          environments: {}\n        };\n        regions.push(region);\n      }\n\n      // resolve if ID has been processed\n      const idExists = region.ids.includes(id);\n      if (!idExists) {\n        region.ids.push(id);\n      }\n\n      if (!isKO) {\n        if (targetEnvironment !== undefined) {\n          if (region.environments[targetEnvironment]) {\n            region.environments[targetEnvironment] = region.environments[targetEnvironment] + 1;\n          } else {\n            region.environments[targetEnvironment] = 1;\n          }\n        }\n      }\n\n      // in case of KO need to understand if it fails\n      if (isKO) {\n        // first find the OK equivalent \n        const allTarget = element.target.replace(\"__KO\", \"__ALL\");\n        const allElement = dataList.find(d => d.target == allTarget);\n        // if we can not find than it's serious error\n        if (allElement === undefined) {\n          console.error(\"Unable to locate the \" + allTarget + \" data series.\");\n        } else {\n          for (let index = 0; index < element.datapoints.length; index++) {\n            const failingInstances = element.datapoints[index][0];\n            const allInstances = allElement.datapoints[index][0];\n            if (failingInstances == allInstances) {\n              region.failedIds.push(id);\n              break;\n            }\n          }\n        }\n      }\n    });\n\n    return regions;\n  }\n\n  apSeriesHandler(region) {\n    const total = region.ids.length;\n    const failing = region.failedIds.length;\n    const successRate = ((total - failing) / total * 100).toFixed(0);\n\n    const series = new TimeSeries({\n      datapoints: [],\n      alias: region.name\n    });\n\n    series.stats = {\n      successRate: successRate,\n      totalProbes: total,\n      failingProbes: failing,\n      failingProbesNames: region.failedIds,\n      targetEnvironments: region.environments\n    }\n\n    return series;\n  }\n\n  seriesHandler(seriesData) {\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  setNewMapCenter() {\n    if (this.panel.mapCenter !== 'custom') {\n      this.panel.mapCenterLatitude = mapCenters[this.panel.mapCenter].mapCenterLatitude;\n      this.panel.mapCenterLongitude = mapCenters[this.panel.mapCenter].mapCenterLongitude;\n    }\n    this.mapCenterMoved = true;\n    this.render();\n  }\n\n  setZoom() {\n    this.map.setZoom(this.panel.initialZoom || 1);\n  }\n\n  toggleLegend() {\n    if (!this.panel.showLegend) {\n      this.map.removeLegend();\n    }\n    this.render();\n  }\n\n  toggleMouseWheelZoom() {\n    this.map.setMouseWheelZoom();\n    this.render();\n  }\n\n  toggleStickyLabels() {\n    this.map.clearCircles();\n    this.render();\n  }\n\n  changeThresholds() {\n    this.updateThresholdData();\n    this.map.legend.update();\n    this.render();\n  }\n\n  updateThresholdData() {\n    this.data.thresholds = this.panel.thresholds.split(',').map((strValue) => {\n      return Number(strValue.trim());\n    });\n    while (_.size(this.panel.colors) > _.size(this.data.thresholds) + 1) {\n      // too many colors. remove the last one.\n      this.panel.colors.pop();\n    }\n    while (_.size(this.panel.colors) < _.size(this.data.thresholds) + 1) {\n      // not enough colors. add one.\n      const newColor = 'rgba(50, 172, 45, 0.97)';\n      this.panel.colors.push(newColor);\n    }\n  }\n\n  changeLocationData() {\n    this.loadLocationDataFromFile(true);\n\n    if (this.panel.locationData === 'geohash') {\n      this.render();\n    }\n  }\n\n/* eslint class-methods-use-this: 0 */\n  link(scope, elem, attrs, ctrl) {\n    mapRenderer(scope, elem, attrs, ctrl);\n  }\n}\n\nWorldmapCtrl.templateUrl = 'module.html';\n"]}